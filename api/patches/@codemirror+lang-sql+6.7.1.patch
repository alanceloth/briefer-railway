diff --git a/node_modules/@codemirror/lang-sql/dist/index.d.ts b/node_modules/@codemirror/lang-sql/dist/index.d.ts
index 77dfccc..d8bd379 100644
--- a/node_modules/@codemirror/lang-sql/dist/index.d.ts
+++ b/node_modules/@codemirror/lang-sql/dist/index.d.ts
@@ -168,7 +168,7 @@ declare function keywordCompletionSource(dialect: SQLDialect, upperCase?: boolea
 Returns a completion sources that provides schema-based completion
 for the given configuration.
 */
-declare function schemaCompletionSource(config: SQLConfig): CompletionSource;
+declare function schemaCompletionSource(config: SQLConfig): Promise<CompletionSource>;
 /**
 SQL language support for the given SQL dialect, with keyword
 completion, and, if provided, schema-based completion as extra
diff --git a/node_modules/@codemirror/lang-sql/dist/index.js b/node_modules/@codemirror/lang-sql/dist/index.js
index 13e1d00..770798d 100644
--- a/node_modules/@codemirror/lang-sql/dist/index.js
+++ b/node_modules/@codemirror/lang-sql/dist/index.js
@@ -494,7 +494,7 @@ class CompletionLevel {
         for (let option of completions)
             this.addCompletion(typeof option == "string" ? nameCompletion(option, "property", this.idQuote, this.idCaseInsensitive) : option);
     }
-    addNamespace(namespace) {
+    async addNamespace(namespace) {
         if (Array.isArray(namespace)) {
             this.addCompletions(namespace);
         }
@@ -502,10 +502,10 @@ class CompletionLevel {
             this.addNamespace(namespace.children);
         }
         else {
-            this.addNamespaceObject(namespace);
+            await this.addNamespaceObject(namespace);
         }
     }
-    addNamespaceObject(namespace) {
+    async addNamespaceObject(namespace) {
         for (let name of Object.keys(namespace)) {
             let children = namespace[name], self = null;
             let parts = name.replace(/\\?\./g, p => p == "." ? "\0" : p).split("\0");
@@ -520,6 +520,7 @@ class CompletionLevel {
                 scope = scope.child(parts[i].replace(/\\\./g, "."));
             }
             scope.addNamespace(children);
+            await new Promise(resolve => setTimeout(resolve, 0));
         }
     }
 }
@@ -532,12 +533,12 @@ function nameCompletion(label, type, idQuote, idCaseInsensitive) {
 // supporting the deprecated, not-so-well-considered style of
 // supplying the schema (dotted property names for schemas, separate
 // `tables` and `schemas` completions).
-function completeFromSchema(schema, tables, schemas, defaultTableName, defaultSchemaName, dialect) {
+async function completeFromSchema(schema, tables, schemas, defaultTableName, defaultSchemaName, dialect) {
     var _a;
     let idQuote = ((_a = dialect === null || dialect === void 0 ? void 0 : dialect.spec.identifierQuotes) === null || _a === void 0 ? void 0 : _a[0]) || '"';
     let top = new CompletionLevel(idQuote, !!(dialect === null || dialect === void 0 ? void 0 : dialect.spec.caseInsensitiveIdentifiers));
     let defaultSchema = defaultSchemaName ? top.child(defaultSchemaName) : null;
-    top.addNamespace(schema);
+    await top.addNamespace(schema);
     if (tables)
         (defaultSchema || top).addCompletions(tables);
     if (schemas)
